// Minimal ClickUp â†’ JSON sync\n// env: CLICKUP_TOKEN, CLICKUP_TEAM_ID\nconst fs = require('fs');\nconst path = require('path');\nconst axios = require('axios');\n\nconst token = process.env.CLICKUP_TOKEN;\nconst teamId = process.env.CLICKUP_TEAM_ID;\nif (!token || !teamId) {\n  console.error('Missing CLICKUP_TOKEN or CLICKUP_TEAM_ID');\n  process.exit(1);\n}\n\nconst api = axios.create({\n  baseURL: 'https://api.clickup.com/api/v2',\n  headers: { Authorization: token },\n  timeout: 60000,\n});\n\nconst OUT_DIR = path.join(process.cwd(), 'clickup', 'data');\nfs.mkdirSync(OUT_DIR, { recursive: true });\n\nasync function getSpaces() {\n  const res = await api.get(`/team/${teamId}/space`, { params: { archived: false } });\n  return res.data.spaces || [];\n}\nasync function getFolders(spaceId) {\n  const res = await api.get(`/space/${spaceId}/folder`, { params: { archived: false } });\n  return res.data.folders || [];\n}\nasync function getListsInSpace(spaceId) {\n  const res = await api.get(`/space/${spaceId}/list`, { params: { archived: false } });\n  return res.data.lists || [];\n}\nasync function getListsInFolder(folderId) {\n  const res = await api.get(`/folder/${folderId}/list`, { params: { archived: false } });\n  return res.data.lists || [];\n}\nasync function getAllTasks(listId) {\n  let page = 0, out = [];\n  while (true) {\n    const res = await api.get(`/list/${listId}/task`, {\n      params: {\n        include_closed: true,\n        subtasks: true,\n        page,\n        order_by: 'updated',\n      }\n    });\n    const batch = res.data.tasks || [];\n    out.push(...batch);\n    if (batch.length < 100) break; // page size = 100\n    page += 1;\n  }\n  return out;\n}\n\n(async () => {\n  const spaces = await getSpaces();\n  fs.writeFileSync(path.join(OUT_DIR, `spaces.json`), JSON.stringify(spaces, null, 2));\n\n  const foldersAll = [];\n  const listsAll = [];\n  for (const s of spaces) {\n    const folders = await getFolders(s.id);\n    foldersAll.push(...folders);\n    const orphanLists = await getListsInSpace(s.id);\n    listsAll.push(...orphanLists);\n    for (const f of folders) {\n      const lists = await getListsInFolder(f.id);\n      listsAll.push(...lists);\n    }\n  }\n  fs.writeFileSync(path.join(OUT_DIR, `folders.json`), JSON.stringify(foldersAll, null, 2));\n  fs.writeFileSync(path.join(OUT_DIR, `lists.json`), JSON.stringify(listsAll, null, 2));\n\n  // dump tasks per list\n  const tasksDir = path.join(OUT_DIR, 'tasks');\n  fs.mkdirSync(tasksDir, { recursive: true });\n  for (const l of listsAll) {\n    const tasks = await getAllTasks(l.id);\n    fs.writeFileSync(path.join(tasksDir, `${l.id}.json`), JSON.stringify({ list: l, tasks }, null, 2));\n  }\n\n  // Optional: quick summary for humans\n  const summary = {\n    synced_at: new Date().toISOString(),\n    spaces: spaces.map(s => ({ id: s.id, name: s.name })),\n    totals: {\n      spaces: spaces.length,\n      folders: foldersAll.length,\n      lists: listsAll.length,\n      tasks_files: fs.readdirSync(tasksDir).length,\n    }\n  };\n  fs.writeFileSync(path.join(process.cwd(), 'clickup', 'WORKFLOW.md'),\n`# ClickUp Snapshot\n\n- Synced at: ${summary.synced_at}\n- Spaces: ${summary.totals.spaces}\n- Folders: ${summary.totals.folders}\n- Lists: ${summary.totals.lists}\n- Task files: ${summary.totals.tasks_files}\n\nSee \`clickup/data\` for raw JSON exports.\n`);\n  console.log('Sync complete.');\n})().catch(err => {\n  console.error(err?.response?.data || err.message);\n  process.exit(1);\n});\n